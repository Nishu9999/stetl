[etl]
# Example of process-chain for extracting Top10NL source data to PostGIS
# 1. input_big_gml_file: read the input file as lines (each element has newline in our case)
# 2. gml_splitter: split big line-based text file stream into smaller (etree) docs
# 3. xml_schema_validator: validation against top10nl XSD of (etree) doc [OPTIONAL]
# 4. transformer_xslt: transform each (etree) doc
# 5. output_ogr2ogr: output using ogr2ogr, input are a GML etree docs, output can be any OGR output
chains = input_big_gml_file|gml_splitter|transformer_xslt|output_ogr2ogr
# chains = input_big_gml_file|gml_splitter|xml_schema_validator|transformer_xslt|output_ogr2ogr

# The source input file
[input_big_gml_file]
class = inputs.fileinput.XmlLineStreamerFileInput
file_path = input
# file_path = /Users/just/geodata/top10nl/TOP10NL_GML_Filechunks_september_2012/GML_Filechunks/Top10NL_000001.gml
# file_path = /Users/just/geodata/top10nl/TOP10NL_GML_50D_Blokken_september_2012/GML_50D_Blokken/Top10NL_05Oost.gml
# Split the big GML input file into smaller chunks, each as a GML doc

# Assembles etree docs from GML element text linestream
[gml_splitter]
class = filters.gmlsplitter.GmlSplitter
max_features = 30000
start_container = <?xml version="1.0" encoding="UTF-8"?>
   <gml:FeatureCollection
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:top10nl="http://www.kadaster.nl/schemas/top10nl/v20120116"
    xmlns:gml="http://www.opengis.net/gml"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:smil20="http://www.w3.org/2001/SMIL20/"
    xmlns:smil20lang="http://www.w3.org/2001/SMIL20/Language"
    xsi:schemaLocation="http://www.kadaster.nl/schemas/top10nl/v20120116 http://www.kadaster.nl/schemas/top10nl/v20120116/TOP10NL_1_1_1.xsd">
end_container = </gml:FeatureCollection >
container_tag = gml:FeatureCollection
start_feature_markers = <gml:featureMember>
end_feature_markers = </gml:featureMember>

# Validator for XML
[xml_schema_validator]
class = filters.xmlvalidator.XmlSchemaValidator
xsd = http://www.kadaster.nl/schemas/top10nl/v20120116/TOP10NL_1_1_1.xsd
enabled = True

# Transforms into simple feature data (single geometry, single attrs)
[transformer_xslt]
class = filters.xsltfilter.XsltFilter
script = top10-split_v1.1.1.xsl

# The ogr2ogr command-line, may use any output here, as long as
# the input is a GML file. The "temp_file" is where etree-docs
# are saved. It has to be the same file as in the ogr2ogr command.
# TODO: find a way to use a GML-stream through stdin to ogr2ogr
[output_ogr2ogr]
class = outputs.ogroutput.Ogr2OgrOutput
temp_file = output/top10-ogr.gml
ogr2ogr_cmd = ogr2ogr \
    -append \
    -f PostgreSQL \
   "PG:dbname=top10nl host=localhost port=5432 user=top10nl password=top10nl" \
   -gt 65536 \
   -fieldTypeToString StringList \
   -lco PG_USE_COPY=YES \
   -lco GML_GFS_TEMPLATE=top10-v1.1.1.gfs \
   -lco PRECISION=NO \
   -a_srs epsg:28992  \
   -s_srs epsg:28992 \
   output/top10-ogr.gml

# Alternative outputs for testing
[output_std]
class = outputs.standardoutput.StandardOutput

[output_file]
class = outputs.fileoutput.FileOutput
file_path = output/top10nl-fc.gml


