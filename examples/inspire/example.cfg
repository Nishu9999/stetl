# EXAMPLE ETL CONFIGURATION (Local Dutch Address Data (BAG) to INSPIRE Addresses)

# DEFINE THE ETL AS A ONE OR MORE CHAINS (PIPELINE) OF COMPONENTS
[etl]
chains = input_in_pg_woonplaats|gml_splitter|transformer_xslt|output_std,
         input_pg_postcode|gml_splitter|transformer_xslt|output_std

# Input: ogr2ogr PostGIS (with SQL query) to GML v3 std output stream
[input_in_pg_woonplaats]
class = inputs.ogrinput.OgrPostgisInput
in_srs = EPSG:28992
in_pg_db = bag
in_pg_schema = bagaveen
in_pg_host     = localhost
in_pg_user     = postgres
in_pg_password = postgres
in_pg_port = 5432
in_pg_sql = SELECT
	wp.identificatie,
	wp.woonplaatsnaam,
	translate(to_char(wp.begindatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'),' ', 'T') as begindatumtijdvakgeldigheid,
	translate(to_char(wp.einddatumtijdvakgeldigheid, 'YYYY-MM-DD HH24:MI:SS'), ' ', 'T') as einddatumtijdvakgeldigheid
	FROM woonplaatsactueelbestaand as wp
out_srs = EPSG:4258
out_layer_name = woonplaats
out_geotype =
out_gml_format = GML3
out_dimension = 2

[input_pg_postcode]
class = inputs.ogrinput.OgrPostgisInput
in_srs = EPSG:28992
in_pg_db = bag
in_pg_schema = bagaveen
in_pg_host     = localhost
in_pg_user     = postgres
in_pg_password = postgres
in_pg_port = 5432
in_pg_sql = SELECT DISTINCT
	na.postcode
	FROM nummeraanduidingactueelbestaand as na
out_srs = EPSG:4258
out_layer_name = postcode
out_geotype =
out_gml_format = GML3
out_dimension = 2

# Filter: splits an input stream of GML into manageable parsed docs
[gml_splitter]
class = filters.gmlsplitter.GmlSplitter
max_features = 100
start_container = <?xml version="1.0" encoding="UTF-8"?>
	<ogr:FeatureCollection
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://ogr.maptools.org/ my.xsd"
	 xmlns:ogr="http://ogr.maptools.org/"
	 xmlns:gml="http://www.opengis.net/gml">
end_container = </ogr:FeatureCollection>
container_tag = ogr:FeatureCollection
start_feature_markers = <ogr:featureMember
end_feature_markers = </ogr:featureMember>

# Filter: transforms one parsed (lxml etree) DOM doc to another
[transformer_xslt]
class = filters.xsltfilter.XsltFilter
script = local-to-inspire-ad-sd.xsl

# Output: print DOM document to stdout
[output_std]
class = output.Output

# Output: print DOM document to file
[output_file]
class = outputs.fileoutput.FileOutput
file_path = test/output.gml

# Output: insert DOM document as GML blobs in deegree blobstore tables
[output_deegree_blobstore]
class = outputs.deegreeoutput.DeegreeBlobstoreOutput
overwrite = true
feature_member_tag = member
srid = -1
database = pdok
schema = inspire_ad_blob
host     = localhost
user     = pdok_owner
password = pdok_owner
port = 5432


